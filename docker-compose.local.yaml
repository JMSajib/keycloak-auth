services:
  caddy:
    image: caddy:2
    container_name: caddy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
    environment:
      - CLOUDFLARE_API_TOKEN=ftzWBxKo6AUiK-AqGSnwjWfp9iOst-RZKU4zLwSP
    networks:
      - app_network
      - keycloak_network
    depends_on:
      - api
      - keycloak
      - frontend

  frontend:
    image: jmsajib11/sso_frontend:0.0.1  # Replace with your frontend image
    container_name: react_frontend
    networks:
      - app_network
    depends_on:
      - api
      - caddy
  api:
    # build: .
    container_name: fastapi_app
    image: jmsajib11/stage_auth:0.0.1  # Use your image
    restart: unless-stopped
    # ports:
    #   - "8000:8000"
    # environment:
    #   - DATABASE_URL=postgresql+asyncpg://postgres:mysecretpassword@app_postgres:5432/auth_db
    #   - REDIS_HOST=redis
    #   - REDIS_PORT=6379
    #   - REDIS_DB=0
    #   - SECRET_KEY=WhDF1_-BQnWJQRFfuKQUeRU-zGpo6DZyiA270tTG0_g
    #   - FRONTEND_BASE_URL=http://localhost:3000
    #   - FRONTEND_REDIRECT_URL=http://localhost:3000/auth/callback
    #   - BACKEND_BASE_URL=http://localhost:8000
    #   - KEYCLOAK_URL=http://keycloak:8080
    #   - KC_HOSTNAME=keycloak
    #   - KC_HOSTNAME_PORT=8080
    #   - KC_HOSTNAME_STRICT="false"
    #   - KC_HOSTNAME_STRICT_HTTPS="false"
    #   - KEYCLOAK_FRONTEND_URL=http://keycloak:8080
    depends_on:
      app_postgres:
        condition: service_healthy
      redis:
        condition: service_started
      keycloak:
        condition: service_started
    # volumes:
    #   - .:/app
    networks:
      - app_network
      - keycloak_network
    command: uvicorn run:app --host 0.0.0.0 --port 8000

  app_postgres:
    image: postgres:15
    container_name: app_postgres
    volumes:
      - app_postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=mysecretpassword
      - POSTGRES_DB=auth_db
    ports:
      - "5432:5432"
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    container_name: app_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  keycloak_postgres:
    image: postgres:15
    container_name: keycloak_postgres
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password123
    ports:
      - "5433:5432"
    volumes:
      - keycloak_postgres_data:/var/lib/postgresql/data
    networks:
      - keycloak_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: keycloak
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://keycloak_postgres:5432/keycloak
      KC_DB_USERNAME: postgres
      KC_DB_PASSWORD: password123
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    command:
      - start-dev
    # ports:
    #   - "8080:8080"
    depends_on:
      keycloak_postgres:
        condition: service_healthy
    networks:
      - keycloak_network

volumes:
  app_postgres_data:
    name: app_postgres_data
  keycloak_postgres_data:
    name: keycloak_postgres_data
  redis_data:
    name: app_redis_data
  caddy_data:
    name: caddy_data
  caddy_config:
    name: caddy_config

networks:
  app_network:
    name: app_network
  keycloak_network:
    name: keycloak_network